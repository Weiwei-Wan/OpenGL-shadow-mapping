#version 330

in vec3 FragPos;
in vec2 TexCoords;
in vec3 normal;
in vec4 FragPosLightSpace;

uniform sampler2D diffuseMap;
uniform sampler2D shadowMap;
uniform mat4 model;
uniform vec3 lightPos;
uniform vec3 viewPos;

float bias = 0.005;

float ShadowCalculation(vec4 fragPosLightSpace)
{
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    projCoords = projCoords * 0.5 + 0.5;
    // get closest depth
    float closestDepth = texture(shadowMap, projCoords.xy).r; 
    // get depth
    float currentDepth = projCoords.z;
    // check in shadow    
    float shadow = currentDepth - bias > closestDepth  ? 1.0 : 0.0;
    return shadow;
}

void main(){
    // get diffuse color
    //vec3 color = texture(diffuseMap, TexCoords).rgb;
    vec3 color = vec3(1.0);
    vec3 lightColor = vec3(1.0);
    // ambient
    vec3 ambient = 0.15 * lightColor;
    // diffuse
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(lightDir, normal), 0.0);
    vec3 diffuse = diff * lightColor;
    // specular
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 halfwayDir = normalize(lightDir + viewDir);  
    float spec = pow(max(dot(normal, halfwayDir), 0.0), 128.0);
    vec3 specular = spec * lightColor;  

    // shadow
    float shadow = ShadowCalculation(FragPosLightSpace);       
    vec3 lighting = (ambient + (1.0 - shadow) * (diffuse + specular)) * color;    
    gl_FragColor = vec4(lighting, 1.0);
}


