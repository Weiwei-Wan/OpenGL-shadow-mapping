#version 330

in vec3 FragPos;
in vec2 TexCoords;
in vec3 normal;
in vec4 FragPosLightSpace;

uniform sampler2D diffuseMap;
uniform sampler2D shadowMap;
uniform mat4 model;
uniform vec3 lightPos;
uniform vec3 viewPos;

#define BIAS 0.0
#define NEAR_PLANE 3.0
#define FAR_PLANE 8.0
#define BLOCK_RADIUS 5

float lightWidth=10f;  
float SMDiffuse = 0.6f; 

float getLinearizeDepth(float depth) {
    float z = (2.0 * NEAR_PLANE * FAR_PLANE) / (FAR_PLANE + NEAR_PLANE - depth * (FAR_PLANE - NEAR_PLANE));
    return (z - NEAR_PLANE)/(FAR_PLANE - NEAR_PLANE);
}

float findBlocker(vec2 uv, float zReceiver) {
    int blockers = 0;
    float ret = 0.0;
    float r = lightWidth * (zReceiver - NEAR_PLANE/FAR_PLANE) / zReceiver;
    r *= SMDiffuse;
    vec2 texelSize = 1.0 / textureSize(shadowMap, 0); 
    for(int x = -BLOCK_RADIUS; x <= BLOCK_RADIUS; ++x) {
        for(int y = -BLOCK_RADIUS; y <= BLOCK_RADIUS; ++y) {
            // [0, 1]
            float shadowMapDepth = texture(shadowMap, uv + r*vec2(x, y) * texelSize).r;
            // [0, 1] => [-1, 1]
            shadowMapDepth = getLinearizeDepth(shadowMapDepth * 2.0 - 1.0);
            if(zReceiver - BIAS > shadowMapDepth) {
                ret += shadowMapDepth;
                ++blockers;
            }
        }
    }
    // no blocker 
    if (blockers == 0) {return -1.0;}
    return ret/blockers;
}

float PCFShadowCalculation(vec4 fragPosLightSpace, float radius) {
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    projCoords = projCoords * 0.5 + 0.5;
    // get closest depth
    float closestDepth = texture(shadowMap, projCoords.xy).r; 
    // get depth
    float currentDepth = getLinearizeDepth(projCoords.z);
    // check in shadow
    float bias = 0.005;
    float shadow = 0.0;
    vec2 texelSize = 1.0 / textureSize(shadowMap, 0);
    for (float x = -radius; x <= radius;x++) {
        for (float y = -radius; y <= radius; y++) {
            float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r; 
            shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;        
        }    
    }
    shadow /= ((2*radius+1)*(2*radius+1));
    return shadow;
}


float PCSS(vec4 fragPosLightSpace) {
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    float depth = getLinearizeDepth(projCoords.z);
    // [-1, 1] => [0, 1]
    projCoords = projCoords * 0.5 + 0.5;
    // STEP 1: avgblocker depth
    float avgDepth = findBlocker(projCoords.xy, depth);
    // no blocker
    if (avgDepth == -1.0) {return 1.0;}
    // STEP 2: penumbra size
    float penumbra = (depth - avgDepth) / avgDepth * lightWidth;
    float filterRadius = penumbra * NEAR_PLANE / (depth);
    // STEP 3: filtering
    return PCFShadowCalculation(FragPosLightSpace, filterRadius);
}

void main(){
    // get diffuse color
    //vec3 color = texture(diffuseMap, TexCoords).rgb;
    vec3 color = vec3(1.0);
    vec3 lightColor = vec3(1.0);
    // ambient
    vec3 ambient = 0.1 * lightColor;
    // diffuse
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(lightDir, normal), 0.0);
    vec3 diffuse = diff * lightColor;
    // specular
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 halfwayDir = normalize(lightDir + viewDir);  
    float spec = pow(max(dot(normal, halfwayDir), 0.0), 128.0);
    vec3 specular = spec * lightColor;  

    // shadow
    float shadow = PCSS(FragPosLightSpace);       
    vec3 lighting = (ambient + (1.0 - shadow) * (diffuse + specular)) * color;    
    gl_FragColor = vec4(lighting, 1.0);
}


