#version 330

in vec3 FragPos;
in vec2 TexCoords;
in vec3 normal;
in vec4 FragPosLightSpace;

uniform sampler2D varianceTexture;
uniform mat4 model;
uniform vec3 lightPos;
uniform vec3 viewPos;

#define NEAR_PLANE 3.0
#define FAR_PLANE 8.0
#define BIAS 0.005

float getLinearizeDepth(float depth) {
    float z = (2.0 * NEAR_PLANE * FAR_PLANE) / (FAR_PLANE + NEAR_PLANE - depth * (FAR_PLANE - NEAR_PLANE));
    return (z - NEAR_PLANE)/(FAR_PLANE - NEAR_PLANE);
}

float VSM(vec4 fragPosLightSpace) {
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    float depth = getLinearizeDepth(projCoords.z);
    // [-1, 1] => [0, 1]
    projCoords = projCoords * 0.5 + 0.5;

    vec2 d_d2 = texture(varianceTexture, projCoords.xy).rg;
    float var = d_d2.y - d_d2.x * d_d2.x; // E(X-EX)^2 = EX^2-E^2X

    // 不满足不等式, 直接可见
    if(depth - BIAS < d_d2.x){
        return 1.0;
    }
    else{
        float t_minus_mu = depth - d_d2.x;
        return var/(var + t_minus_mu*t_minus_mu);
    }
}

void main(){
    // get diffuse color
    vec3 color = vec3(1.0);
    vec3 lightColor = vec3(1.0);
    // ambient
    vec3 ambient = 0.15 * lightColor;
    // diffuse
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(lightDir, normal), 0.0);
    vec3 diffuse = diff * lightColor;
    // specular
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 halfwayDir = normalize(lightDir + viewDir);  
    float spec = pow(max(dot(normal, halfwayDir), 0.0), 128.0);
    vec3 specular = spec * lightColor;  

    // shadow
    float shadow = VSM(FragPosLightSpace);       
    vec3 lighting = (ambient + shadow * (diffuse + specular)) * color;    
    gl_FragColor = vec4(lighting, 1.0);
}


